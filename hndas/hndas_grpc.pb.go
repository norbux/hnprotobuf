// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hndas

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DASClient is the client API for DAS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DASClient interface {
	LastItems(ctx context.Context, in *ListFilter, opts ...grpc.CallOption) (*ItemsList, error)
	GetStory(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Story, error)
	GetStoryComments(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Conversation, error)
	GetJob(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Job, error)
	GetJobComments(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Conversation, error)
	GetPoll(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Poll, error)
	GetPollComments(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Conversation, error)
	GetUserInfo(ctx context.Context, in *UserFilter, opts ...grpc.CallOption) (*User, error)
}

type dASClient struct {
	cc grpc.ClientConnInterface
}

func NewDASClient(cc grpc.ClientConnInterface) DASClient {
	return &dASClient{cc}
}

func (c *dASClient) LastItems(ctx context.Context, in *ListFilter, opts ...grpc.CallOption) (*ItemsList, error) {
	out := new(ItemsList)
	err := c.cc.Invoke(ctx, "/hndas.DAS/LastItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dASClient) GetStory(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Story, error) {
	out := new(Story)
	err := c.cc.Invoke(ctx, "/hndas.DAS/GetStory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dASClient) GetStoryComments(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/hndas.DAS/GetStoryComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dASClient) GetJob(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Job, error) {
	out := new(Job)
	err := c.cc.Invoke(ctx, "/hndas.DAS/GetJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dASClient) GetJobComments(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/hndas.DAS/GetJobComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dASClient) GetPoll(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Poll, error) {
	out := new(Poll)
	err := c.cc.Invoke(ctx, "/hndas.DAS/GetPoll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dASClient) GetPollComments(ctx context.Context, in *ItemFilter, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/hndas.DAS/GetPollComments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dASClient) GetUserInfo(ctx context.Context, in *UserFilter, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/hndas.DAS/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DASServer is the server API for DAS service.
// All implementations must embed UnimplementedDASServer
// for forward compatibility
type DASServer interface {
	LastItems(context.Context, *ListFilter) (*ItemsList, error)
	GetStory(context.Context, *ItemFilter) (*Story, error)
	GetStoryComments(context.Context, *ItemFilter) (*Conversation, error)
	GetJob(context.Context, *ItemFilter) (*Job, error)
	GetJobComments(context.Context, *ItemFilter) (*Conversation, error)
	GetPoll(context.Context, *ItemFilter) (*Poll, error)
	GetPollComments(context.Context, *ItemFilter) (*Conversation, error)
	GetUserInfo(context.Context, *UserFilter) (*User, error)
	mustEmbedUnimplementedDASServer()
}

// UnimplementedDASServer must be embedded to have forward compatible implementations.
type UnimplementedDASServer struct {
}

func (UnimplementedDASServer) LastItems(context.Context, *ListFilter) (*ItemsList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastItems not implemented")
}
func (UnimplementedDASServer) GetStory(context.Context, *ItemFilter) (*Story, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStory not implemented")
}
func (UnimplementedDASServer) GetStoryComments(context.Context, *ItemFilter) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoryComments not implemented")
}
func (UnimplementedDASServer) GetJob(context.Context, *ItemFilter) (*Job, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJob not implemented")
}
func (UnimplementedDASServer) GetJobComments(context.Context, *ItemFilter) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetJobComments not implemented")
}
func (UnimplementedDASServer) GetPoll(context.Context, *ItemFilter) (*Poll, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoll not implemented")
}
func (UnimplementedDASServer) GetPollComments(context.Context, *ItemFilter) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPollComments not implemented")
}
func (UnimplementedDASServer) GetUserInfo(context.Context, *UserFilter) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedDASServer) mustEmbedUnimplementedDASServer() {}

// UnsafeDASServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DASServer will
// result in compilation errors.
type UnsafeDASServer interface {
	mustEmbedUnimplementedDASServer()
}

func RegisterDASServer(s grpc.ServiceRegistrar, srv DASServer) {
	s.RegisterService(&DAS_ServiceDesc, srv)
}

func _DAS_LastItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DASServer).LastItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hndas.DAS/LastItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DASServer).LastItems(ctx, req.(*ListFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAS_GetStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DASServer).GetStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hndas.DAS/GetStory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DASServer).GetStory(ctx, req.(*ItemFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAS_GetStoryComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DASServer).GetStoryComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hndas.DAS/GetStoryComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DASServer).GetStoryComments(ctx, req.(*ItemFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAS_GetJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DASServer).GetJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hndas.DAS/GetJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DASServer).GetJob(ctx, req.(*ItemFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAS_GetJobComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DASServer).GetJobComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hndas.DAS/GetJobComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DASServer).GetJobComments(ctx, req.(*ItemFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAS_GetPoll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DASServer).GetPoll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hndas.DAS/GetPoll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DASServer).GetPoll(ctx, req.(*ItemFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAS_GetPollComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DASServer).GetPollComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hndas.DAS/GetPollComments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DASServer).GetPollComments(ctx, req.(*ItemFilter))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAS_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFilter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DASServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hndas.DAS/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DASServer).GetUserInfo(ctx, req.(*UserFilter))
	}
	return interceptor(ctx, in, info, handler)
}

// DAS_ServiceDesc is the grpc.ServiceDesc for DAS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DAS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hndas.DAS",
	HandlerType: (*DASServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastItems",
			Handler:    _DAS_LastItems_Handler,
		},
		{
			MethodName: "GetStory",
			Handler:    _DAS_GetStory_Handler,
		},
		{
			MethodName: "GetStoryComments",
			Handler:    _DAS_GetStoryComments_Handler,
		},
		{
			MethodName: "GetJob",
			Handler:    _DAS_GetJob_Handler,
		},
		{
			MethodName: "GetJobComments",
			Handler:    _DAS_GetJobComments_Handler,
		},
		{
			MethodName: "GetPoll",
			Handler:    _DAS_GetPoll_Handler,
		},
		{
			MethodName: "GetPollComments",
			Handler:    _DAS_GetPollComments_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _DAS_GetUserInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hndas.proto",
}
